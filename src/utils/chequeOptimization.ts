/**
 * Service d'optimisation pour les ch√®ques sans centimes
 * Calcule automatiquement l'acompte optimal pour avoir des ch√®ques avec des montants entiers
 */

export interface ChequeOptimization {
  acompte: number;
  montantCheque: number;
  nbCheques: number;
  totalTTC: number;
  economieTemps: string;
}

/**
 * Propose un acompte optimal pour que tous les ch√®ques soient √† un montant entier (sans centimes)
 * avec un acompte minimum de 15% du total
 * @param totalTTC Montant total TTC de la facture
 * @param nbCheques Nombre de ch√®ques souhait√©
 * @returns Proposition d'optimisation avec acompte et montant par ch√®que
 */
export function proposerAcomptePourChequesRonds(
  totalTTC: number,
  nbCheques: number
): ChequeOptimization {
  if (nbCheques <= 0 || totalTTC <= 0) {
    return {
      acompte: 0,
      montantCheque: 0,
      nbCheques: 0,
      totalTTC,
      economieTemps: '‚ùå Configuration invalide',
    };
  }

  // Calcul du montant de ch√®que rond (sans centimes)
  const montantCheque = Math.floor(totalTTC / nbCheques);

  // L'acompte = le reste qui ne rentre pas dans la division enti√®re
  let acompte = totalTTC - montantCheque * nbCheques;

  // ‚ú® NOUVEAU : Acompte minimum de 15% du total
  const acompteMinimum = Math.ceil(totalTTC * 0.15); // 15% minimum

  // Si l'acompte calcul√© est inf√©rieur √† 15%, on ajuste
  if (acompte < acompteMinimum) {
    acompte = acompteMinimum;
    // Recalculer le montant par ch√®que avec le nouvel acompte
    const montantRestant = totalTTC - acompte;
    const nouveauMontantCheque = Math.floor(montantRestant / nbCheques);

    // V√©rifier si on peut avoir des ch√®ques ronds avec cet acompte
    const resteAvecNouvelAcompte =
      montantRestant - nouveauMontantCheque * nbCheques;

    if (resteAvecNouvelAcompte > 0) {
      // Ajuster l'acompte pour absorber le reste
      acompte = acompte + resteAvecNouvelAcompte;
    }

    // Message d'√©conomie de temps avec acompte minimum
    const economieTemps = `‚ú® ${nbCheques} ch√®ques de ${nouveauMontantCheque}‚Ç¨ pile + acompte 15% minimum (${Math.round((acompte / totalTTC) * 100)}%)`;

    return {
      acompte: Math.round(acompte * 100) / 100,
      montantCheque: nouveauMontantCheque,
      nbCheques,
      totalTTC,
      economieTemps,
    };
  }

  // Message d'√©conomie de temps standard
  const economieTemps =
    acompte > 0
      ? `‚ú® ${nbCheques} ch√®ques de ${montantCheque}‚Ç¨ pile (gain de temps √©norme !)`
      : `üéØ D√©j√† optimal ! ${nbCheques} ch√®ques de ${montantCheque}‚Ç¨ exactement`;

  return {
    acompte: Math.round(acompte * 100) / 100, // Arrondi √† 2 d√©cimales
    montantCheque,
    nbCheques,
    totalTTC,
    economieTemps,
  };
}

/**
 * Formate un message explicatif pour l'utilisateur
 * @param optimization R√©sultat de l'optimisation
 * @returns Message format√© pour l'interface
 */
export function formatMessageOptimisation(
  optimization: ChequeOptimization
): string {
  if (optimization.nbCheques <= 0) {
    return '';
  }

  const { acompte, montantCheque, nbCheques, totalTTC } = optimization;

  if (acompte === 0) {
    return `üéØ Parfait ! ${nbCheques} ch√®ques de ${montantCheque}‚Ç¨ exactement = ${totalTTC}‚Ç¨`;
  }

  return `üí° Suggestion optimale : Acompte de ${acompte}‚Ç¨ + ${nbCheques} ch√®ques de ${montantCheque}‚Ç¨ chacun = ${totalTTC}‚Ç¨ total`;
}

/**
 * Calcule le gain de temps estim√© en √©vitant l'√©criture des centimes
 * @param nbCheques Nombre de ch√®ques
 * @param avecCentimes Si les ch√®ques auraient eu des centimes sans optimisation
 * @returns Message de gain de temps
 */
export function calculerGainTemps(
  nbCheques: number,
  avecCentimes: boolean
): string {
  if (!avecCentimes || nbCheques <= 0) {
    return '';
  }

  const secondesEconomisees = nbCheques * 8; // ~8 secondes √©conomis√©es par ch√®que sans centimes
  const minutesEconomisees = Math.round((secondesEconomisees / 60) * 10) / 10;

  if (minutesEconomisees < 1) {
    return `‚è±Ô∏è Gain estim√© : ${secondesEconomisees}s d'√©criture √©conomis√©es`;
  }

  return `‚è±Ô∏è Gain estim√© : ~${minutesEconomisees} min d'√©criture √©conomis√©es (${nbCheques} ch√®ques sans centimes)`;
}

/**
 * V√©rifie si l'optimisation est b√©n√©fique (√©vite r√©ellement des centimes)
 * @param totalTTC Montant total
 * @param nbCheques Nombre de ch√®ques
 * @returns True si l'optimisation √©vite des centimes
 */
export function optimisationBenefique(
  totalTTC: number,
  nbCheques: number
): boolean {
  if (nbCheques <= 0) return false;

  const montantSansOptimisation = totalTTC / nbCheques;
  const aCentimes = montantSansOptimisation % 1 !== 0;

  return aCentimes;
}

/**
 * Exemples d'utilisation pour la documentation
 */
export const exemples = {
  exemple1: {
    totalTTC: 1840,
    nbCheques: 9,
    resultat: proposerAcomptePourChequesRonds(1840, 9),
    // => { acompte: 276, montantCheque: 173, nbCheques: 9 } (15% minimum)
  },
  exemple2: {
    totalTTC: 1500,
    nbCheques: 10,
    resultat: proposerAcomptePourChequesRonds(1500, 10),
    // => { acompte: 225, montantCheque: 127, nbCheques: 10 } (15% minimum)
  },
  exemple3: {
    totalTTC: 2157.89,
    nbCheques: 8,
    resultat: proposerAcomptePourChequesRonds(2157.89, 8),
    // => { acompte: 323.68, montantCheque: 229, nbCheques: 8 } (15% minimum)
  },
  exemple4: {
    totalTTC: 1737,
    nbCheques: 10,
    resultat: proposerAcomptePourChequesRonds(1737, 10),
    // => { acompte: 261 (15%), montantCheque: 147, nbCheques: 10 }
    // Au lieu de 10% (173‚Ç¨), on a 15% minimum (261‚Ç¨) + 10 ch√®ques de 147‚Ç¨
  },
};
