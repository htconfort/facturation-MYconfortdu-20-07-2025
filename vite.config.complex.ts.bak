import react from '@vitejs/plugin-react'
import { defineConfig } from 'vite'

export default defineConfig({
  plugins: [react()],
    visualizer({
      open: true,              // ouvre automatiquement le rapport apr√®s build
      filename: 'stats.html',  // fichier g√©n√©r√© √† la racine
      template: 'treemap',     // treemap | sunburst | network
      gzipSize: true,
      brotliSize: true,
    }),
    proxyLoggerPlugin({}),
  ],

  optimizeDeps: {
    // tu avais d√©j√† exclu lucide-react, on conserve
    exclude: ['lucide-react'],
  },

  build: {
    sourcemap: false,
    minify: 'esbuild',
    chunkSizeWarningLimit: 2000,
    rollupOptions: {
      output: {
        manualChunks(id) {
          if (id.includes('node_modules')) {
            // regroupe les utilitaires UI lourds dans un chunk d√©di√©
            if (
              id.includes('html2canvas') ||
              id.includes('purify') ||        // dompurify (selon lib, parfois "purify.es")
              id.includes('signature_pad')
            ) {
              return 'ui-utils';
            }
            // tout le reste des node_modules
            return 'vendor';
          }
        },
      },
    },
  },

  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
        // r√©√©crit /api/hello -> /hello sur l'API Express
        rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/api/n8n': {
        target: 'https://n8n.srv765811.hstgr.cloud',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api\/n8n/, ''),
        secure: true,
        xfwd: true,
        configure: (proxy /* http-proxy */, _options) => {
          proxy.on('proxyReq', (proxyReq, req, _res) => {
            // ‚ö†Ô∏è √©vite de logguer des payloads sensibles en prod
            const reqUrl = (req as IncomingMessage & { url?: string }).url;
            console.log('üîÑ PROXY REQUEST:', {
              method: req.method,
              url: reqUrl,
              targetUrl: proxyReq.path,
              contentLength: req.headers['content-length'],
              contentType: req.headers['content-type'],
            });
          });

          proxy.on('proxyRes', (proxyRes, _req, _res) => {
            console.log('üì• PROXY RESPONSE:', {
              status: proxyRes.statusCode,
              statusMessage: proxyRes.statusMessage,
              contentType: proxyRes.headers['content-type'],
            });
          });

          proxy.on('error', (err) => {
            console.error('‚ùå PROXY ERROR:', err.message);
          });
        },
      },
    },
  },
}));
