diff --git a/src/components/SignaturePadView.tsx b/src/components/SignaturePadView.tsx
index 0000000..1111111 100644
--- a/src/components/SignaturePadView.tsx
+++ b/src/components/SignaturePadView.tsx
@@ -1,83 +1,160 @@
-import { useEffect, useRef, useState } from 'react';
-import type SignaturePad from 'signature_pad';
-import {
-  initSignaturePad,
-  exportSignature,
-} from '../services/signatureService';
-
-type Props = {
-  onSigned?: (dataUrl: string, timestamp: string) => void;
-  onPrevious?: () => void;
-  onDrawingStart?: () => void;
-  onDrawingEnd?: () => void;
-  className?: string;
-};
-
-export default function SignaturePadView({
-  onSigned,
-  onPrevious,
-  onDrawingStart,
-  onDrawingEnd,
-  className,
-}: Props) {
-  const canvasRef = useRef<HTMLCanvasElement | null>(null);
-  const [pad, setPad] = useState<SignaturePad | null>(null);
-
-  useEffect(() => {
-    if (!canvasRef.current) return;
-    const p = initSignaturePad(canvasRef.current);
-    
-    // Callbacks pour g√©rer l'√©tat de dessin
-    p.addEventListener('beginStroke', () => onDrawingStart?.());
-    p.addEventListener('endStroke', () => onDrawingEnd?.());
-    
-    setPad(p);
-
-    const handleResize = () => {
-      if (!canvasRef.current) return;
-      const wasEmpty = p.isEmpty();
-      const data = p.toData();
-      const ratio = Math.max(window.devicePixelRatio || 1, 1);
-      canvasRef.current.width = canvasRef.current.offsetWidth * ratio;
-      canvasRef.current.height = canvasRef.current.offsetHeight * ratio;
-      const ctx = canvasRef.current.getContext('2d');
-      if (ctx) ctx.scale(ratio, ratio);
-      p.clear();
-      if (!wasEmpty) p.fromData(data);
-    };
-
-    window.addEventListener('resize', handleResize);
-    return () => window.removeEventListener('resize', handleResize);
-  }, [onDrawingStart, onDrawingEnd]);
-
-  const handleClear = () => pad?.clear();
-
-  const handleSave = async () => {
-    if (!pad || pad.isEmpty()) return;
-    const { pngDataUrl, timestamp } = await exportSignature(pad);
-    onSigned?.(pngDataUrl, timestamp);
-  };
-
-  return (
-    <div className={`flex flex-col gap-3 ${className || ''}`}>
-      <div className='rounded-2xl border border-myconfort-dark/20 bg-white shadow-sm p-2'>
-        <div className='h-[280px] w-full'>
-          <canvas
-            ref={canvasRef}
-            className='h-full w-full rounded-xl touch-none'
-            style={{ 
-              touchAction: 'none', 
-              overscrollBehavior: 'contain' 
-            }}
-            onTouchStart={(e) => e.stopPropagation()}
-            onTouchMove={(e) => e.stopPropagation()}
-          />
-        </div>
-      </div>
-      <div className='flex items-center gap-2'>
-        {onPrevious && (
-          <button
-            onClick={onPrevious}
-            className='px-4 py-2 rounded-xl bg-gray-200 hover:bg-gray-300 text-gray-800 min-h-[56px] font-semibold'
-          >
-            ‚Üê Pr√©c√©dent
-          </button>
-        )}
-        <button
-          onClick={handleClear}
-          className='px-4 py-2 rounded-xl bg-myconfort-blue/20 hover:bg-myconfort-blue/30 min-h-[56px] font-semibold'
-        >
-          Effacer
-        </button>
-        <button
-          onClick={handleSave}
-          className='px-4 py-2 rounded-xl bg-myconfort-green text-white hover:opacity-90 min-h-[56px] font-semibold'
-        >
-          Enregistrer la signature
-        </button>
-      </div>
-    </div>
-  );
-}
+import { useEffect, useRef, useState } from 'react';
+import type SignaturePad from 'signature_pad';
+import { initSignaturePad, exportSignature } from '../services/signatureService';
+
+type Props = {
+  onSigned?: (dataUrl: string, timestamp: string) => void;
+  onPrevious?: () => void;
+  onDrawingStart?: () => void;
+  onDrawingEnd?: () => void;
+  className?: string;
+};
+
+export default function SignaturePadView({
+  onSigned,
+  onPrevious,
+  onDrawingStart,
+  onDrawingEnd,
+  className,
+}: Props) {
+  const canvasRef = useRef<HTMLCanvasElement | null>(null);
+  const [pad, setPad] = useState<SignaturePad | null>(null);
+  const [hasInk, setHasInk] = useState(false);   // active/d√©sactive le bouton "Enregistrer"
+  const [saving, setSaving] = useState(false);   // √©tat d'enregistrement local
+
+  // refs stables pour √©viter de recr√©er le pad si les callbacks parent changent
+  const onStartRef = useRef(onDrawingStart);
+  const onEndRef = useRef(onDrawingEnd);
+  useEffect(() => { onStartRef.current = onDrawingStart; }, [onDrawingStart]);
+  useEffect(() => { onEndRef.current = onDrawingEnd; }, [onDrawingEnd]);
+
+  // initialisation unique du SignaturePad
+  useEffect(() => {
+    if (!canvasRef.current) return;
+    const p = initSignaturePad(canvasRef.current);
+
+    // signature_pad utilise onBegin/onEnd, pas des events DOM
+    p.onBegin = () => {
+      onStartRef.current?.();
+      setHasInk(true);
+    };
+    p.onEnd = () => {
+      onEndRef.current?.();
+      setHasInk(!p.isEmpty());
+    };
+
+    setPad(p);
+
+    // resize s√ªr avec restauration des traits
+    const handleResize = () => {
+      if (!canvasRef.current) return;
+      const data = p.toData();
+      const ratio = Math.max(window.devicePixelRatio || 1, 1);
+      const { offsetWidth, offsetHeight } = canvasRef.current;
+      if (offsetWidth === 0 || offsetHeight === 0) return; // √©vite clear 0x0
+      canvasRef.current.width = offsetWidth * ratio;
+      canvasRef.current.height = offsetHeight * ratio;
+      const ctx = canvasRef.current.getContext('2d');
+      if (ctx) ctx.scale(ratio, ratio);
+      p.clear();
+      if (data.length > 0) {
+        try { p.fromData(data); } catch { /* no-op si format incompatible */ }
+      }
+      setHasInk(!p.isEmpty());
+    };
+
+    // premier ajustement + √©couteur
+    handleResize();
+    window.addEventListener('resize', handleResize);
+    return () => {
+      window.removeEventListener('resize', handleResize);
+    };
+  }, []);
+
+  const handleClear = () => {
+    pad?.clear();
+    setHasInk(false);
+  };
+
+  const handleSave = async () => {
+    if (!pad || pad.isEmpty() || saving) return;
+    try {
+      setSaving(true);
+      const { pngDataUrl, timestamp } = await exportSignature(pad);
+      onSigned?.(pngDataUrl, timestamp);
+      // aucune navigation auto : l'utilisateur clique "Suivant" c√¥t√© parent
+    } finally {
+      setSaving(false);
+    }
+  };
+
+  return (
+    <div className={`flex flex-col gap-3 ${className || ''}`}>
+      <div className='rounded-2xl border border-myconfort-dark/20 bg-white shadow-sm p-2'>
+        <div className='h-[280px] w-full'>
+          <canvas
+            ref={canvasRef}
+            className='h-full w-full rounded-xl'
+            style={{ touchAction: 'none', overscrollBehavior: 'contain' }}
+            onTouchStart={(e) => e.stopPropagation()}
+            onTouchMove={(e) => e.stopPropagation()}
+          />
+        </div>
+      </div>
+      <div className='flex items-center gap-2'>
+        {onPrevious && (
+          <button
+            onClick={onPrevious}
+            className='px-4 py-2 rounded-xl bg-gray-200 hover:bg-gray-300 text-gray-800 min-h-[56px] font-semibold'
+          >
+            ‚Üê Pr√©c√©dent
+          </button>
+        )}
+        <button
+          onClick={handleClear}
+          className='px-4 py-2 rounded-xl bg-myconfort-blue/20 hover:bg-myconfort-blue/30 min-h-[56px] font-semibold'
+        >
+          Effacer
+        </button>
+        <button
+          onClick={handleSave}
+          disabled={!hasInk || saving}
+          className={`px-4 py-2 rounded-xl min-h-[56px] font-semibold ${
+            (!hasInk || saving)
+              ? 'bg-gray-400 text-gray-600 cursor-not-allowed opacity-60'
+              : 'bg-myconfort-green text-white hover:opacity-90'
+          }`}
+        >
+          {saving ? 'üíæ Sauvegarde‚Ä¶' : 'Enregistrer la signature'}
+        </button>
+      </div>
+    </div>
+  );
+}
diff --git a/src/services/signatureService.ts b/src/services/signatureService.ts
index 2222222..3333333 100644
--- a/src/services/signatureService.ts
+++ b/src/services/signatureService.ts
@@ -1,35 +1,41 @@
 import SignaturePad from 'signature_pad';
 
 export type SignatureExport = {
   pngDataUrl: string; // data:image/png;base64,...
   blob: Blob;
   timestamp: string; // ISO
 };
 
 export function initSignaturePad(canvas: HTMLCanvasElement) {
   const pad = new SignaturePad(canvas, {
     throttle: 16, // fluidit√© stylet
     minWidth: 0.75,
     maxWidth: 2.5,
     penColor: '#14281D',
-    backgroundColor: 'rgba(255,255,255,0)',
+    // √âvite des artefacts d'effacement visuel sur iPad/WebView
+    backgroundColor: '#FFFFFF',
   });
 
   // Ajuste la densit√© pour iPad HD
   const ratio = Math.max(window.devicePixelRatio || 1, 1);
-  canvas.width = canvas.offsetWidth * ratio;
-  canvas.height = canvas.offsetHeight * ratio;
-  const ctx = canvas.getContext('2d');
-  if (ctx) ctx.scale(ratio, ratio);
+  const { offsetWidth, offsetHeight } = canvas;
+  if (offsetWidth > 0 && offsetHeight > 0) {
+    canvas.width = offsetWidth * ratio;
+    canvas.height = offsetHeight * ratio;
+    const ctx = canvas.getContext('2d');
+    if (ctx) ctx.scale(ratio, ratio);
+  }
   pad.clear();
   return pad;
 }
 
 export async function exportSignature(
   pad: SignaturePad
 ): Promise<SignatureExport> {
   const timestamp = new Date().toISOString();
   const pngDataUrl = pad.toDataURL('image/png');
   const res = await fetch(pngDataUrl);
   const blob = await res.blob();
   return { pngDataUrl, blob, timestamp };
 }
