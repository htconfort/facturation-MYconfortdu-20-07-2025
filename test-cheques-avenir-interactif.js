#!/usr/bin/env node

/**
 * Script de test pour v√©rifier l'interactivit√© du champ "nombre de ch√®ques √† venir"
 * 
 * Ce script v√©rifie que :
 * 1. Le champ de saisie existe dans ProductSection.tsx
 * 2. La propri√©t√© nombreChequesAVenir est dans le type Invoice
 * 3. L'affichage dynamique fonctionne dans InvoicePreviewModern.tsx
 * 4. La liaison entre le formulaire et la facture est compl√®te
 */

import fs from 'fs';
import path from 'path';

console.log('üß™ TEST - Interactivit√© du nombre de ch√®ques √† venir');
console.log('=' .repeat(60));

// Chemins des fichiers √† v√©rifier
const files = {
  types: 'src/types/index.ts',
  app: 'src/App.tsx',
  productSection: 'src/components/ProductSection.tsx',
  invoicePreview: 'src/components/InvoicePreviewModern.tsx'
};

let allTestsPassed = true;
const results = [];

// Test 1 : V√©rifier la propri√©t√© dans le type Invoice
try {
  const typesContent = fs.readFileSync(files.types, 'utf8');
  const hasNombreChequesAVenir = typesContent.includes('nombreChequesAVenir?: number;');
  
  if (hasNombreChequesAVenir) {
    results.push('‚úÖ Type Invoice : nombreChequesAVenir d√©fini correctement');
  } else {
    results.push('‚ùå Type Invoice : nombreChequesAVenir MANQUANT');
    allTestsPassed = false;
  }
} catch (error) {
  results.push(`‚ùå Erreur lecture ${files.types}: ${error.message}`);
  allTestsPassed = false;
}

// Test 2 : V√©rifier l'√©tat initial dans App.tsx
try {
  const appContent = fs.readFileSync(files.app, 'utf8');
  const hasInitialState = appContent.includes('nombreChequesAVenir: 0');
  const hasPropsPass = appContent.includes('nombreChequesAVenir={invoice.nombreChequesAVenir || 0}') &&
                        appContent.includes('onNombreChequesAVenirChange={(nombre) => setInvoice(prev => ({ ...prev, nombreChequesAVenir: nombre }))}');
  
  if (hasInitialState && hasPropsPass) {
    results.push('‚úÖ App.tsx : √âtat initial et transmission des props OK');
  } else {
    results.push('‚ùå App.tsx : √âtat initial ou transmission des props MANQUANT');
    if (!hasInitialState) results.push('  - √âtat initial nombreChequesAVenir manquant');
    if (!hasPropsPass) results.push('  - Props nombreChequesAVenir ou callback manquant');
    allTestsPassed = false;
  }
} catch (error) {
  results.push(`‚ùå Erreur lecture ${files.app}: ${error.message}`);
  allTestsPassed = false;
}

// Test 3 : V√©rifier le champ de saisie dans ProductSection.tsx
try {
  const productSectionContent = fs.readFileSync(files.productSection, 'utf8');
  const hasProps = productSectionContent.includes('nombreChequesAVenir: number;') &&
                   productSectionContent.includes('onNombreChequesAVenirChange: (nombre: number) => void;');
  const hasInputField = productSectionContent.includes('value={nombreChequesAVenir || 0}') &&
                        productSectionContent.includes('onNombreChequesAVenirChange(Number(val || "0"))');
  const hasCalculations = productSectionContent.includes('Number(nombreChequesAVenir || 0)');
  
  if (hasProps && hasInputField && hasCalculations) {
    results.push('‚úÖ ProductSection.tsx : Props, champ de saisie et calculs OK');
  } else {
    results.push('‚ùå ProductSection.tsx : Props, champ de saisie ou calculs MANQUANT');
    if (!hasProps) results.push('  - Props nombreChequesAVenir manquantes');
    if (!hasInputField) results.push('  - Champ de saisie manquant ou mal configur√©');
    if (!hasCalculations) results.push('  - Calculs avec nombreChequesAVenir manquants');
    allTestsPassed = false;
  }
} catch (error) {
  results.push(`‚ùå Erreur lecture ${files.productSection}: ${error.message}`);
  allTestsPassed = false;
}

// Test 4 : V√©rifier l'affichage dynamique dans InvoicePreviewModern.tsx
try {
  const invoicePreviewContent = fs.readFileSync(files.invoicePreview, 'utf8');
  const hasConditionalDisplay = invoicePreviewContent.includes('invoice.nombreChequesAVenir && invoice.nombreChequesAVenir > 0');
  const hasDynamicText = invoicePreviewContent.includes('invoice.nombreChequesAVenir} ch√®que{invoice.nombreChequesAVenir > 1 ? \'s\' : \'\'} √† venir');
  
  if (hasConditionalDisplay && hasDynamicText) {
    results.push('‚úÖ InvoicePreviewModern.tsx : Affichage dynamique OK');
  } else {
    results.push('‚ùå InvoicePreviewModern.tsx : Affichage dynamique MANQUANT');
    if (!hasConditionalDisplay) results.push('  - Condition d\'affichage manquante');
    if (!hasDynamicText) results.push('  - Texte dynamique manquant');
    allTestsPassed = false;
  }
} catch (error) {
  results.push(`‚ùå Erreur lecture ${files.invoicePreview}: ${error.message}`);
  allTestsPassed = false;
}

// Test 5 : V√©rifier que l'ancien √©tat local n'existe plus
try {
  const productSectionContent = fs.readFileSync(files.productSection, 'utf8');
  const hasOldState = productSectionContent.includes('useState<string>("")') && 
                      productSectionContent.includes('chequesQuantity') &&
                      !productSectionContent.includes('// chequesQuantity est maintenant remplac√© par la prop nombreChequesAVenir');
  
  if (!hasOldState) {
    results.push('‚úÖ Migration : Ancien √©tat local chequesQuantity supprim√©');
  } else {
    results.push('‚ùå Migration : Ancien √©tat local chequesQuantity encore pr√©sent');
    allTestsPassed = false;
  }
} catch (error) {
  results.push(`‚ùå Erreur v√©rification migration: ${error.message}`);
  allTestsPassed = false;
}

// Affichage des r√©sultats
console.log('\nüìã R√âSULTATS DES TESTS :');
console.log('-'.repeat(40));
results.forEach(result => console.log(result));

console.log('\n' + '='.repeat(60));
if (allTestsPassed) {
  console.log('üéâ TOUS LES TESTS PASS√âS !');
  console.log('‚ú® Le champ "nombre de ch√®ques √† venir" est maintenant interactif');
  console.log('üìù La valeur saisie dans le formulaire appara√Æt sur la facture');
  console.log('üíæ La valeur est sauvegard√©e dans l\'objet Invoice');
  console.log('üñ®Ô∏è La facture imprim√©e affichera le nombre de ch√®ques √† venir');
} else {
  console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â !');
  console.log('üîß Veuillez corriger les probl√®mes mentionn√©s ci-dessus');
}
console.log('='.repeat(60));

// Instructions d'usage
console.log('\nüìñ INSTRUCTIONS D\'USAGE :');
console.log('1. Ouvrir l\'application MyComfort');
console.log('2. Aller dans la section "Produits & Tarification"');
console.log('3. Dans le bloc "Remarques", section "Ch√®ques √† venir"');
console.log('4. Saisir un nombre dans le champ "Nombre de ch√®ques"');
console.log('5. La valeur appara√Æt instantan√©ment dans l\'aper√ßu de facture');
console.log('6. Dans le bloc "Remarques" de la facture, √† c√¥t√© de l\'adresse SAV');

process.exit(allTestsPassed ? 0 : 1);
