#!/bin/bash

# üöÄ SCRIPT DE V√âRIFICATION PR√â-D√âPLOIEMENT NETLIFY
# MyConfort Facturation - Validation automatique

echo "üîç V√âRIFICATION PR√â-D√âPLOIEMENT NETLIFY"
echo "======================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleur
print_status() {
    if [ $2 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå $1${NC}"
    fi
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

# Compteur d'erreurs
errors=0

echo ""
print_info "1. V√©rification des d√©pendances..."

# V√©rification de Node.js
if command -v node &> /dev/null; then
    node_version=$(node -v)
    print_status "Node.js install√© ($node_version)" 0
else
    print_status "Node.js non trouv√©" 1
    ((errors++))
fi

# V√©rification de npm
if command -v npm &> /dev/null; then
    npm_version=$(npm -v)
    print_status "npm install√© ($npm_version)" 0
else
    print_status "npm non trouv√©" 1
    ((errors++))
fi

echo ""
print_info "2. V√©rification des fichiers de configuration..."

# V√©rification package.json
if [ -f "package.json" ]; then
    print_status "package.json pr√©sent" 0
else
    print_status "package.json manquant" 1
    ((errors++))
fi

# V√©rification netlify.toml
if [ -f "netlify.toml" ]; then
    print_status "netlify.toml pr√©sent" 0
else
    print_status "netlify.toml manquant" 1
    ((errors++))
fi

# V√©rification _redirects
if [ -f "public/_redirects" ]; then
    print_status "public/_redirects pr√©sent" 0
else
    print_status "public/_redirects manquant" 1
    ((errors++))
fi

# V√©rification _headers
if [ -f "public/_headers" ]; then
    print_status "public/_headers pr√©sent" 0
else
    print_status "public/_headers manquant" 1
    ((errors++))
fi

echo ""
print_info "3. Installation des d√©pendances..."

# Installation des d√©pendances
if npm ci --silent > /dev/null 2>&1; then
    print_status "D√©pendances install√©es" 0
else
    print_status "Erreur installation d√©pendances" 1
    ((errors++))
fi

echo ""
print_info "4. V√©rification du lint..."

# V√©rification ESLint
if npm run lint > /dev/null 2>&1; then
    print_status "Lint pass√© avec succ√®s" 0
else
    print_warning "Lint avec warnings/erreurs (v√©rifiez manuellement)"
fi

echo ""
print_info "5. Test du build de production..."

# Test du build
if npm run build > /dev/null 2>&1; then
    print_status "Build de production r√©ussi" 0
    
    # V√©rification du dossier dist
    if [ -d "dist" ]; then
        dist_size=$(du -sh dist | cut -f1)
        print_status "Dossier dist cr√©√© ($dist_size)" 0
    else
        print_status "Dossier dist non cr√©√©" 1
        ((errors++))
    fi
    
    # V√©rification index.html
    if [ -f "dist/index.html" ]; then
        print_status "index.html g√©n√©r√©" 0
    else
        print_status "index.html manquant" 1
        ((errors++))
    fi
else
    print_status "√âchec du build de production" 1
    ((errors++))
fi

echo ""
print_info "6. V√©rification de la structure des fichiers..."

# V√©rification des composants principaux
components=(
    "src/App.tsx"
    "src/main.tsx"
    "src/components/InvoicePDF.tsx"
    "src/services/n8nWebhookService.ts"
    "src/utils/invoice-calculations.ts"
)

for component in "${components[@]}"; do
    if [ -f "$component" ]; then
        print_status "$component pr√©sent" 0
    else
        print_status "$component manquant" 1
        ((errors++))
    fi
done

echo ""
print_info "7. V√©rification Git..."

# V√©rification du statut Git
if git status > /dev/null 2>&1; then
    print_status "Repository Git initialis√©" 0
    
    # V√©rification des changements non commit√©es
    if [ -z "$(git status --porcelain)" ]; then
        print_status "Aucun changement non commit√©" 0
    else
        print_warning "Changements non commit√©es d√©tect√©s"
        echo "   Fichiers modifi√©s:"
        git status --porcelain | head -5
    fi
else
    print_status "Pas de repository Git" 1
    ((errors++))
fi

echo ""
print_info "8. Analyse des fichiers de configuration Netlify..."

# V√©rification netlify.toml
if grep -q "publish = \"dist\"" netlify.toml 2>/dev/null; then
    print_status "Configuration publish correcte" 0
else
    print_status "Configuration publish incorrecte" 1
    ((errors++))
fi

if grep -q "command = \"npm run build\"" netlify.toml 2>/dev/null; then
    print_status "Commande de build correcte" 0
else
    print_status "Commande de build incorrecte" 1
    ((errors++))
fi

echo ""
echo "======================================"

# R√©sum√© final
if [ $errors -eq 0 ]; then
    echo -e "${GREEN}üéâ PR√äT POUR LE D√âPLOIEMENT NETLIFY !${NC}"
    echo ""
    echo -e "${BLUE}Prochaines √©tapes :${NC}"
    echo "1. Connectez-vous √† https://app.netlify.com"
    echo "2. Cr√©ez un nouveau site depuis Git"
    echo "3. S√©lectionnez ce repository"
    echo "4. Les param√®tres de build sont d√©j√† configur√©s"
    echo "5. Ajoutez les variables d'environnement n√©cessaires"
    echo ""
    echo -e "${YELLOW}Variables d'environnement requises :${NC}"
    echo "- VITE_EMAILJS_PUBLIC_KEY"
    echo "- VITE_EMAILJS_SERVICE_ID"
    echo "- VITE_EMAILJS_TEMPLATE_ID"
    echo "- VITE_N8N_WEBHOOK_URL"
    echo "- VITE_COMPANY_NAME"
    echo "- VITE_COMPANY_PHONE"
    echo "- VITE_COMPANY_EMAIL"
    echo ""
else
    echo -e "${RED}‚ùå $errors ERREUR(S) D√âTECT√âE(S)${NC}"
    echo ""
    echo -e "${YELLOW}Corrigez les erreurs avant de d√©ployer.${NC}"
    echo "Consultez le guide GUIDE_DEPLOIEMENT_NETLIFY.md pour plus d'informations."
fi

echo ""
