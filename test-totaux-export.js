// Test des totaux dans l'export du store
console.log('ðŸ§® Test des calculs de totaux dans l\'export du store');

// Simulation d'un produit avec remise
const produitTest = {
  qty: 2,
  priceTTC: 1000, // 1000â‚¬ TTC l'unitÃ©
  discount: 10, // 10% de remise
  discountType: 'percent'
};

// Fonction calculateProductTotal simulÃ©e
function calculateProductTotal(qty, priceTTC, discount = 0, discountType = 'percent') {
  const total = qty * priceTTC;
  if (discountType === 'percent') {
    return total * (1 - discount / 100);
  } else {
    return total - discount;
  }
}

const totalTTCWithDiscount = calculateProductTotal(
  produitTest.qty,
  produitTest.priceTTC,
  produitTest.discount,
  produitTest.discountType
);

console.log('ðŸ“¦ Produit test:');
console.log(`- QuantitÃ©: ${produitTest.qty}`);
console.log(`- Prix unitaire TTC: ${produitTest.priceTTC}â‚¬`);
console.log(`- Remise: ${produitTest.discount}${produitTest.discountType === 'percent' ? '%' : 'â‚¬'}`);
console.log(`- Total TTC avec remise: ${totalTTCWithDiscount.toFixed(2)}â‚¬`);

const montantHT = totalTTCWithDiscount / 1.2;
const montantTVA = totalTTCWithDiscount - montantHT;

console.log('\nðŸ’° Totaux calculÃ©s:');
console.log(`- Montant HT: ${montantHT.toFixed(2)}â‚¬`);
console.log(`- Montant TVA (20%): ${montantTVA.toFixed(2)}â‚¬`);
console.log(`- Montant TTC: ${totalTTCWithDiscount.toFixed(2)}â‚¬`);

// Test mode de rÃ¨glement dÃ©taillÃ©
function testPaymentMethod() {
  const tests = [
    {
      method: 'ChÃ¨que Ã  venir',
      depositAmount: 500,
      nombreChequesAVenir: 3,
      totalTTC: 1800,
      expected: 'ChÃ¨que Ã  venir (3 chÃ¨ques de 433â‚¬ + acompte 500.00â‚¬)'
    },
    {
      method: 'Alma 3x',
      depositAmount: 200,
      nombreFoisAlma: 3,
      totalTTC: 1800,
      expected: 'Alma 3x (3 fois de 533â‚¬ + acompte 200.00â‚¬)'
    },
    {
      method: 'Carte Bleue',
      depositAmount: 300,
      totalTTC: 1800,
      expected: 'Carte Bleue (acompte 300.00â‚¬)'
    }
  ];
  
  console.log('\nðŸ’³ Test des modes de rÃ¨glement dÃ©taillÃ©s:');
  
  tests.forEach((test, index) => {
    let result;
    const { method, depositAmount, nombreChequesAVenir, nombreFoisAlma, totalTTC } = test;
    
    if (method === 'ChÃ¨que Ã  venir' && nombreChequesAVenir > 0) {
      const montantParCheque = Math.round((totalTTC - depositAmount) / nombreChequesAVenir);
      result = `ChÃ¨que Ã  venir (${nombreChequesAVenir} chÃ¨ques de ${montantParCheque}â‚¬ + acompte ${depositAmount.toFixed(2)}â‚¬)`;
    } else if (method?.startsWith('Alma') && nombreFoisAlma) {
      const montantParFois = Math.round((totalTTC - depositAmount) / nombreFoisAlma);
      result = `${method} (${nombreFoisAlma} fois de ${montantParFois}â‚¬ + acompte ${depositAmount.toFixed(2)}â‚¬)`;
    } else if (depositAmount > 0) {
      result = `${method} (acompte ${depositAmount.toFixed(2)}â‚¬)`;
    } else {
      result = method;
    }
    
    console.log(`${index + 1}. ${test.method}:`);
    console.log(`   RÃ©sultat: "${result}"`);
    console.log(`   Attendu:  "${test.expected}"`);
    console.log(`   âœ… ${result === test.expected ? 'CORRECT' : 'ERREUR'}`);
    console.log('');
  });
}

testPaymentMethod();

console.log('âœ… Test terminÃ© !');
