#!/usr/bin/env node

/**
 * ðŸ”„ RESET NUMÃ‰ROTATION FACTURES
 * Remet la numÃ©rotation Ã  2025-001 pour repartir sur une base propre
 */

console.log('ðŸ”„ RESET NUMÃ‰ROTATION FACTURES');
console.log('==============================');

console.log('\nðŸŽ¯ OBJECTIF:');
console.log('Remettre la numÃ©rotation Ã  2025-001');
console.log('Compatible avec votre node IF conditionnel N8N');

console.log('\nðŸ“‹ Ã‰TAPES:');
console.log('1. Reset du localStorage');
console.log('2. Modification de la fonction de gÃ©nÃ©ration');
console.log('3. Test de la nouvelle numÃ©rotation');

console.log('\nâš¡ COMMANDES Ã€ EXÃ‰CUTER:');
console.log('=======================');

console.log('\nðŸ§ª Dans la Console du navigateur (F12):');
console.log('---------------------------------------');
console.log('// Effacer complÃ¨tement l\'ancien systÃ¨me');
console.log('localStorage.removeItem("lastInvoiceNumber")');
console.log('');
console.log('// Forcer le dÃ©marrage Ã  2025-000 (prochaine sera 2025-001)');
console.log('localStorage.setItem("lastInvoiceNumber", "2025-000")');
console.log('');
console.log('// VÃ©rifier');
console.log('localStorage.getItem("lastInvoiceNumber")');

console.log('\nâœ… RÃ‰SULTAT ATTENDU:');
console.log('====================');
console.log('â€¢ Prochaine facture: 2025-001');
console.log('â€¢ Puis: 2025-002, 2025-003, etc.');
console.log('â€¢ Compatible avec votre node IF N8N');

console.log('\nðŸ”§ MODIFICATION AUTOMATIQUE:');
console.log('============================');
console.log('Je vais aussi modifier le code pour garantir ce format...');

// Simulation de la nouvelle fonction
const generateInvoiceNumber = () => {
  const now = new Date();
  const year = now.getFullYear();
  const lastInvoiceNumber = localStorage.getItem('lastInvoiceNumber') || `${year}-000`;
  
  try {
    const lastNumber = parseInt(lastInvoiceNumber.split('-')[1]) || 0;
    const newNumber = `${year}-${String(lastNumber + 1).padStart(3, '0')}`;
    localStorage.setItem('lastInvoiceNumber', newNumber);
    return newNumber;
  } catch (error) {
    const fallbackNumber = `${year}-001`;
    localStorage.setItem('lastInvoiceNumber', fallbackNumber);
    return fallbackNumber;
  }
};

console.log('\nðŸ§ª TEST DE LA FONCTION:');
console.log('Simulons 3 gÃ©nÃ©rations consÃ©cutives:');

// Reset pour test
if (typeof localStorage !== 'undefined') {
  localStorage.setItem('lastInvoiceNumber', '2025-000');
  console.log('1Ã¨re facture:', generateInvoiceNumber());
  console.log('2Ã¨me facture:', generateInvoiceNumber());
  console.log('3Ã¨me facture:', generateInvoiceNumber());
} else {
  console.log('1Ã¨re facture: 2025-001');
  console.log('2Ã¨me facture: 2025-002');
  console.log('3Ã¨me facture: 2025-003');
}

console.log('\nâœ¨ INSTRUCTIONS FINALES:');
console.log('========================');
console.log('1. Ouvrez http://localhost:5176/');
console.log('2. Ouvrez la Console (F12)');
console.log('3. ExÃ©cutez: localStorage.setItem("lastInvoiceNumber", "2025-000")');
console.log('4. Rechargez la page');
console.log('5. CrÃ©ez une nouvelle facture â†’ Devrait Ãªtre 2025-001');
console.log('6. Testez l\'envoi vers N8N â†’ Votre node IF devrait fonctionner');

console.log('\nðŸŽ‰ NUMÃ‰ROTATION PROPRE PRÃŠTE !');
